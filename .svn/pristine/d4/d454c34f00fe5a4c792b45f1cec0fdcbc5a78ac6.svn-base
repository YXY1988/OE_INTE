#include "UnitTest.h"
#include "commonlibs.h"
#define VERBOSE
/*
void CVCalibTest()
{
	CameraParam cvParam;
	string cvCalibFileName = "../../Data/Params/Logitechc270_cv0709.xml";
	cvParam.ReadCVCalibParam(cvCalibFileName);
	bool bOk = true;
	if (cvParam.GetCameraMatrix().empty()) bOk = false;
	if (bOk == false)
		throw "Read cv calibration param fail";
	return;
}
 
void UndistortTest()
{
	CameraParam cvParam;
	string cvCalibFileName = "../../Data/Params/Logitechc270_cv0709.xml";
	string ImageFileName = "../../Data/Temp/SB_test120.bmp";
	cv::Mat src, undistort;
	bool bOk = true;

	cvParam.ReadCVCalibParam(cvCalibFileName);
	cvParam.IniValidUndistort();

	src = imread(ImageFileName);
	imshow("src", src);
	waitKey(10);
	cvParam.UndistortImgValid(src, undistort);
	if (src.empty() || undistort.empty()) bOk = false;
	if(bOk==false)
		throw "undistort test fail";
	imshow("undistort", undistort);
	waitKey(10);
	return;
}

void Cv2arTest()
{
	bool bOk = true;
	CameraParam cvParam;
	ARParam arParam;
	string arCalibFileName = "../../Data/Params/Logitechc270_cv0709.dat";
	string cvCalibFileName = "../../Data/Params/Logitechc270_cv0709.xml";

	cvParam.ReadCVCalibParam(cvCalibFileName);
	cvParam.GetARTKCamParam(arCalibFileName);
	arParam = cvParam.GetARParam();

	if (arParam.mat[0][0] == 0) bOk = false;
	if (bOk == false)
		throw "Fail convert cv calibfile to artk format.";
	return;
}
*/
void DetectMajorEllipses(cv::Mat & src)
{
	cv::Mat test, contour, temp, result;
	vector<vector<cv::Point>> edges;
	EdgeDetection _EdgeDetector;
	EllipseDetection _EllipseDetector;
	vector<ElliFit::Ellipse> ellResult;
	vector<cv::Mat> ellMats;
	bool bOk = true;

	//float resizescale = 1;
	//cv::Size dsize = cv::Size(src.cols*resizescale, src.rows*resizescale);
	//resize(src, test, dsize);
	test = src.clone();
	_EdgeDetector.SetSrcImg(test);

# ifdef VERBOSE
	double t_begin = cv::getTickCount();
#endif

	contour = _EdgeDetector.CannyContourDetection(50, 150);

#ifdef VERBOSE
	double t_end = cv::getTickCount();
	double t_cost = (t_end - t_begin) / cv::getTickFrequency() * 1000;
	cout << "ÂÖÀª¼ì²âºÄÊ±(ms)£º " << t_cost << endl;
#endif

	temp = contour.clone();
	temp = _EdgeDetector.FilterTurning(temp, 5);
	temp = _EdgeDetector.FilterLines(temp);
	temp = _EdgeDetector.FilterLength(temp, 10);

#ifdef VERBOSE
	double t_refine = cv::getTickCount();
	t_cost = (t_refine - t_end) / cv::getTickFrequency() * 1000;
	cout << "ÂÖÀªÔ¤´¦ÀíºÄÊ±(ms)£º " << t_cost << endl;
#endif

	edges = _EdgeDetector.GetFinalContours();
	_EllipseDetector.SetSrcImg(test);
	_EllipseDetector.SetFilter_radius(100.);
	_EllipseDetector.DetectEllipses(temp, edges);
	_EllipseDetector.DrawEllipses();

#ifdef VERBOSE
	double t_ell = cv::getTickCount();
	t_cost = (t_ell - t_refine) / cv::getTickFrequency() * 1000;
	cout << "ÍÖÔ²¼ì²âºÄÊ±(ms)£º " << t_cost << endl;
#endif

	ellResult = _EllipseDetector.GetEllDetectionResult();
	ellMats = _EllipseDetector.GetEllMatResult();
	
	if (ellResult.size() == 0) bOk = false;
	if (bOk == false)
		throw "No ellipse detected in img";
	return;
}

void TestCoarsePose()
{
	cv::Mat ellMat = (cv::Mat_<double>(3, 3) << 3.526086e-05, 7.714522e-07, -0.01527425,
		7.714522e-07, 3.595431e-05, -0.0071982,
		-0.01527425, -0.0071982, 6.92751687);
	vector<cv::Mat> ellMats;
	ellMats.push_back(ellMat);
	cv::Mat Intrinsic = (cv::Mat_<double>(3, 3) << 827.50897692124522,0 ,299.60111699063754,
	0,814.73836342732341,256.75622898129393, 0,0,1);

	PoseEstimation CTestCoarse;
	CTestCoarse.SetIntrinsic(Intrinsic);
	CTestCoarse.SetModelRadius(178);
	CTestCoarse.CalCoarsePoses(ellMats);
	return;
}

void TestImgConvertFunctions()
{
	string imageFileName = "../Data/Temp/SB_test120.bmp";

	cv::Mat testing = cv::imread(imageFileName);
	osg::ref_ptr<osg::Image> testResult = ConvertCVMat2OsgImg(testing);
	osgDB::writeImageFile(*testResult, "../Data/Temp/TestResult/SB_test120_reslut.bmp");

	osg::ref_ptr<osg::Image> testing2 = osgDB::readImageFile(imageFileName);
	cv::Mat testResult2 = ConvertOsgImg2CVMat(testing2);
	cv::imwrite("../Data/Temp/TestResult/SB_test120_reslut2.bmp", testResult2);
}

void TestSyntheticTemplateGeneration()
{

	SceneGenerator sceneGenerator;
	string imageFileName = "../Data/Temp/SB_test120.bmp";
	cv::Mat bgimg = cv::imread(imageFileName);
	cv::Mat Intrinsic = (cv::Mat_<double>(3, 3) << 827.50897692124522, 0, 299.60111699063754,
		0, 814.73836342732341, 256.75622898129393, 0, 0, 1);
	cv::Mat PoseMat = (cv::Mat_<double>(4, 4) << 0.9808679135958881, -0.1929804413015563, 0.02562587272866551, 137.053573311234,
		0.1946744361184826, 0.9723327140347628, -0.129116060735072, 65.60683142202694,
		0, 0.1316345034284271, 0.9912983191285818, -871.1839883388401,
		0, 0, 0, 1);
	cv::Mat ObjectTransform = (cv::Mat_<double>(4, 4) << -1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, -1, 0,
		0, 0, 0, 1);
	cv::Mat OsgPoseMat = PoseMat.t();
	string IveModelName = "../Data/Temp/cylinder.ive";

	sceneGenerator.SetBgImgMat(bgimg);
	sceneGenerator.SetCameraIntrinsic(Intrinsic);
	sceneGenerator.SetModelName(IveModelName);
	sceneGenerator.SetUseImgBgFlag(false);
	sceneGenerator.SetPoseMat(OsgPoseMat);
	sceneGenerator.SetViewerSize(640, 480);
	sceneGenerator.SetObjectSelfTransform(ObjectTransform);

	cv::Mat result;
	result = sceneGenerator.GetSyntheticImg();
	imshow("SyntheticTest", result);
	cv::waitKey(0);


/*
	cv::Mat PoseMat2 = (Mat_<double>(4, 4) << 0.9808679135958881, -0.1929804413015563, 0.02562587272866551, 137.053573311234,
		0.1946744361184826, 0.9723327140347628, -0.129116060735072, 65.60683142202694,
		0, 0.1316345034284271, 0.9912983191285818, -1071.1839883388401,
		0, 0, 0, 1);
	sceneGenerator.SetPoseMat(PoseMat2.t());
	result = sceneGenerator.GetSyntheticImg();
	imshow("SyntheticTest", result);
	waitKey(1000);


	cv::Mat PoseMat3 = (Mat_<double>(4, 4) << 0.9808679135958881, -0.1929804413015563, 0.02562587272866551, 137.053573311234,
		0.1946744361184826, 0.9723327140347628, -0.129116060735072, 65.60683142202694,
		0, 0.1316345034284271, 0.9912983191285818, -1271.1839883388401,
		0, 0, 0, 1);
	sceneGenerator.SetPoseMat(PoseMat3.t());
	result = sceneGenerator.GetSyntheticImg();
	imshow("SyntheticTest", result);
	waitKey(100);*/

}

void RunAllTests()
{
	try
	{
// 		cout << "TestImgConvertFunctions......" << endl;
// 		TestImgConvertFunctions();
// 		cout << ".....................ok" << endl;

		cout << "TestSyntheticTemplateGeneration......" << endl;
		TestSyntheticTemplateGeneration();
		cout << ".....................ok" << endl;


		/*cout << "CVCalibTest()......" << endl;
		CVCalibTest();
		cout << ".................... ok." << endl<<endl;*/

		/*cout << "UndistortTest()....." << endl;  
		UndistortTest();
		cout << ".................... ok." << endl<<endl;*/

		/*cout << "Cv2arTest()....." << endl;
		Cv2arTest();
		cout << ".................... ok." << endl << endl;*/

		/*cout << "DetectMajorEllipses(cv::Mat & src)...." << endl;
		DetectMajorEllipses(testimg);
		cout << ".................... ok." << endl << endl;*/

		/*cout << "TestCoarsePoseEstimation(vector<cv::Mat> & ellMats)..." << endl;
		TestCoarsePose();
		cout << "................... ok." << endl << endl;*/

	/*	cout << "Test osg and opencv image format convert functions" << endl;
		TestImgConvertFunctions();
		cout << ".................. ok." << endl << endl;*/

		//TODO: Write Fine Pose Estimation, Integrate Crivellaro's dense descriptor codes
	}
	catch (char const* message)
	{
		cerr << message << endl;
		getchar();
	}
	return;
}

int main()
{
	RunAllTests();
	getchar();

	cv::destroyAllWindows();

	return 0;
}
 